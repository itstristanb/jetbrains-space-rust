/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitRepositorySettingsJbsMirrorSettings {
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "refsSpec", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub refs_spec: Option<Option<Vec<String>>>,
    #[serde(rename = "detachHEAD")]
    pub detach_head: bool,
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<String>>,
    #[serde(rename = "password", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub password: Option<Option<String>>,
    #[serde(rename = "useKeyAuth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub use_key_auth: Option<Option<bool>>,
    #[serde(rename = "key", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key: Option<Option<String>>,
    #[serde(rename = "keyPassphrase", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key_passphrase: Option<Option<String>>,
    #[serde(rename = "keyError", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key_error: Option<Option<String>>,
    #[serde(rename = "publicKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_key: Option<Option<String>>,
    #[serde(rename = "keyFingerprints", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub key_fingerprints: Option<Option<Vec<String>>>,
    #[serde(rename = "fetchPeriodically")]
    pub fetch_periodically: bool,
    #[serde(rename = "fetchBeforeGitCall")]
    pub fetch_before_git_call: bool,
    #[serde(rename = "allowAtomicPush", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub allow_atomic_push: Option<Option<bool>>,
    #[serde(rename = "mirrorPullRequest", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mirror_pull_request: Option<Option<bool>>,
}

impl GitRepositorySettingsJbsMirrorSettings {
    pub fn new(url: String, detach_head: bool, fetch_periodically: bool, fetch_before_git_call: bool) -> GitRepositorySettingsJbsMirrorSettings {
        GitRepositorySettingsJbsMirrorSettings {
            url,
            refs_spec: None,
            detach_head,
            username: None,
            password: None,
            use_key_auth: None,
            key: None,
            key_passphrase: None,
            key_error: None,
            public_key: None,
            key_fingerprints: None,
            fetch_periodically,
            fetch_before_git_call,
            allow_atomic_push: None,
            mirror_pull_request: None,
        }
    }
}


