/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PollRecord {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "owner")]
    pub owner: Box<crate::models::TdMemberProfile>,
    #[serde(rename = "question")]
    pub question: String,
    #[serde(rename = "meVote")]
    pub me_vote: bool,
    #[serde(rename = "countPeople")]
    pub count_people: i32,
    #[serde(rename = "anonymous")]
    pub anonymous: bool,
    #[serde(rename = "closed")]
    pub closed: bool,
    #[serde(rename = "extendable")]
    pub extendable: bool,
    #[serde(rename = "multiChoice")]
    pub multi_choice: bool,
    #[serde(rename = "ended")]
    pub ended: bool,
    #[serde(rename = "expirationTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub expiration_time: Option<Option<String>>,
    #[serde(rename = "votes")]
    pub votes: Vec<crate::models::VoteGroup>,
}

impl PollRecord {
    pub fn new(id: String, owner: crate::models::TdMemberProfile, question: String, me_vote: bool, count_people: i32, anonymous: bool, closed: bool, extendable: bool, multi_choice: bool, ended: bool, votes: Vec<crate::models::VoteGroup>) -> PollRecord {
        PollRecord {
            id,
            owner: Box::new(owner),
            question,
            me_vote,
            count_people,
            anonymous,
            closed,
            extendable,
            multi_choice,
            ended,
            expiration_time: None,
            votes,
        }
    }
}


