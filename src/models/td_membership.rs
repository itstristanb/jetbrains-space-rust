/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct TdMembership {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "member")]
    pub member: Box<crate::models::TdMemberProfile>,
    #[serde(rename = "team")]
    pub team: Box<crate::models::TdTeam>,
    #[serde(rename = "role")]
    pub role: Box<crate::models::TdRole>,
    #[serde(rename = "lead")]
    pub lead: bool,
    #[serde(rename = "manager", skip_serializing_if = "Option::is_none")]
    pub manager: Option<Box<crate::models::TdMemberProfile>>,
    #[serde(rename = "since", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub since: Option<Option<String>>,
    #[serde(rename = "till", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub till: Option<Option<String>>,
    #[serde(rename = "activeSince", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_since: Option<Option<String>>,
    #[serde(rename = "activeTill", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub active_till: Option<Option<String>>,
    #[serde(rename = "requiresApproval")]
    pub requires_approval: bool,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "editFor", skip_serializing_if = "Option::is_none")]
    pub edit_for: Option<Box<crate::models::TdMembership>>,
    #[serde(rename = "pendingEdit", skip_serializing_if = "Option::is_none")]
    pub pending_edit: Option<Box<crate::models::TdMembership>>,
    #[serde(rename = "approver", skip_serializing_if = "Option::is_none")]
    pub approver: Option<Box<crate::models::TdMemberProfile>>,
    #[serde(rename = "customFields")]
    pub custom_fields: ::std::collections::HashMap<String, crate::models::CfValue>,
}

impl TdMembership {
    pub fn new(id: String, member: crate::models::TdMemberProfile, team: crate::models::TdTeam, role: crate::models::TdRole, lead: bool, requires_approval: bool, archived: bool, custom_fields: ::std::collections::HashMap<String, crate::models::CfValue>) -> TdMembership {
        TdMembership {
            id,
            member: Box::new(member),
            team: Box::new(team),
            role: Box::new(role),
            lead,
            manager: None,
            since: None,
            till: None,
            active_since: None,
            active_till: None,
            requires_approval,
            archived,
            edit_for: None,
            pending_edit: None,
            approver: None,
            custom_fields,
        }
    }
}


