/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ClientIde {
    #[serde(rename = "Other")]
    Other,
    #[serde(rename = "AppCode")]
    AppCode,
    #[serde(rename = "AndroidStudio")]
    AndroidStudio,
    #[serde(rename = "CLion")]
    CLion,
    #[serde(rename = "DataGrip")]
    DataGrip,
    #[serde(rename = "DataSpell")]
    DataSpell,
    #[serde(rename = "GoLand")]
    GoLand,
    #[serde(rename = "IDEACommunity")]
    IdeaCommunity,
    #[serde(rename = "IDEAEdu")]
    IdeaEdu,
    #[serde(rename = "IDEAUltimate")]
    IdeaUltimate,
    #[serde(rename = "MPS")]
    Mps,
    #[serde(rename = "PhpStorm")]
    PhpStorm,
    #[serde(rename = "PyCharmCommunity")]
    PyCharmCommunity,
    #[serde(rename = "PyCharmEdu")]
    PyCharmEdu,
    #[serde(rename = "PyCharmProfessional")]
    PyCharmProfessional,
    #[serde(rename = "RubyMine")]
    RubyMine,
    #[serde(rename = "WebStorm")]
    WebStorm,

}

impl ToString for ClientIde {
    fn to_string(&self) -> String {
        match self {
            Self::Other => String::from("Other"),
            Self::AppCode => String::from("AppCode"),
            Self::AndroidStudio => String::from("AndroidStudio"),
            Self::CLion => String::from("CLion"),
            Self::DataGrip => String::from("DataGrip"),
            Self::DataSpell => String::from("DataSpell"),
            Self::GoLand => String::from("GoLand"),
            Self::IdeaCommunity => String::from("IDEACommunity"),
            Self::IdeaEdu => String::from("IDEAEdu"),
            Self::IdeaUltimate => String::from("IDEAUltimate"),
            Self::Mps => String::from("MPS"),
            Self::PhpStorm => String::from("PhpStorm"),
            Self::PyCharmCommunity => String::from("PyCharmCommunity"),
            Self::PyCharmEdu => String::from("PyCharmEdu"),
            Self::PyCharmProfessional => String::from("PyCharmProfessional"),
            Self::RubyMine => String::from("RubyMine"),
            Self::WebStorm => String::from("WebStorm"),
        }
    }
}

impl Default for ClientIde {
    fn default() -> ClientIde {
        Self::Other
    }
}




