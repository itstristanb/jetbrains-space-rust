/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApplicationsPostRequest {
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "pictureAttachmentId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub picture_attachment_id: Option<Option<String>>,
    #[serde(rename = "defaultExternalPicture", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_external_picture: Option<Option<String>>,
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    #[serde(rename = "clientId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_id: Option<Option<String>>,
    #[serde(rename = "clientSecret", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_secret: Option<Option<String>>,
    #[serde(rename = "clientCredentialsFlowEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub client_credentials_flow_enabled: Option<Option<bool>>,
    #[serde(rename = "codeFlowEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code_flow_enabled: Option<Option<bool>>,
    #[serde(rename = "codeFlowRedirectURIs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub code_flow_redirect_uris: Option<Option<String>>,
    #[serde(rename = "pkceRequired", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pkce_required: Option<Option<bool>>,
    #[serde(rename = "publicClientsAllowed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub public_clients_allowed: Option<Option<bool>>,
    #[serde(rename = "implicitFlowEnabled", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implicit_flow_enabled: Option<Option<bool>>,
    #[serde(rename = "implicitFlowRedirectURIs", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub implicit_flow_redirect_uris: Option<Option<String>>,
    #[serde(rename = "endpointUri", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub endpoint_uri: Option<Option<String>>,
    #[serde(rename = "endpointSslVerification", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub endpoint_ssl_verification: Option<Option<bool>>,
    #[serde(rename = "appLevelAuth", skip_serializing_if = "Option::is_none")]
    pub app_level_auth: Option<Box<crate::models::EndpointAuthCreate>>,
    #[serde(rename = "sslKeystoreAuth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub ssl_keystore_auth: Option<Option<String>>,
    #[serde(rename = "hasSigningKey", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub has_signing_key: Option<Option<bool>>,
    #[serde(rename = "hasPublicKeySignature", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub has_public_key_signature: Option<Option<bool>>,
    #[serde(rename = "basicAuthUsername", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub basic_auth_username: Option<Option<String>>,
    #[serde(rename = "basicAuthPassword", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub basic_auth_password: Option<Option<String>>,
    #[serde(rename = "bearerAuthToken", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bearer_auth_token: Option<Option<String>>,
    #[serde(rename = "connectToSpace", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub connect_to_space: Option<Option<bool>>,
    #[serde(rename = "state", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub state: Option<Option<String>>,
}

impl ApplicationsPostRequest {
    pub fn new(name: String) -> ApplicationsPostRequest {
        ApplicationsPostRequest {
            name,
            description: None,
            picture_attachment_id: None,
            default_external_picture: None,
            email: None,
            client_id: None,
            client_secret: None,
            client_credentials_flow_enabled: None,
            code_flow_enabled: None,
            code_flow_redirect_uris: None,
            pkce_required: None,
            public_clients_allowed: None,
            implicit_flow_enabled: None,
            implicit_flow_redirect_uris: None,
            endpoint_uri: None,
            endpoint_ssl_verification: None,
            app_level_auth: None,
            ssl_keystore_auth: None,
            has_signing_key: None,
            has_public_key_signature: None,
            basic_auth_username: None,
            basic_auth_password: None,
            bearer_auth_token: None,
            connect_to_space: None,
            state: None,
        }
    }
}


