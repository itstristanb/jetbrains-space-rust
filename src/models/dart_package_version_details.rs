/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DartPackageVersionDetails {
    #[serde(rename = "repository")]
    pub repository: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "created")]
    pub created: i64,
    #[serde(rename = "accessed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub accessed: Option<Option<i64>>,
    #[serde(rename = "downloads")]
    pub downloads: i64,
    #[serde(rename = "pinned")]
    pub pinned: bool,
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "diskSize")]
    pub disk_size: i64,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<crate::models::CPrincipal>>,
    #[serde(rename = "authors", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authors: Option<Option<Vec<crate::models::CPrincipal>>>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Box<crate::models::PackageOrigin>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<::std::collections::HashMap<String, String>>>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "homePage")]
    pub home_page: String,
    #[serde(rename = "repositoryUrl")]
    pub repository_url: String,
    #[serde(rename = "issueTracker")]
    pub issue_tracker: String,
    #[serde(rename = "documentation")]
    pub documentation: String,
    #[serde(rename = "license")]
    pub license: String,
    #[serde(rename = "readme")]
    pub readme: String,
    #[serde(rename = "changelog")]
    pub changelog: String,
    #[serde(rename = "dependencies", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dependencies: Option<Option<Vec<crate::models::DartPackageDependency>>>,
    #[serde(rename = "devDependencies", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dev_dependencies: Option<Option<Vec<crate::models::DartPackageDependency>>>,
    #[serde(rename = "dependencyOverrides", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub dependency_overrides: Option<Option<Vec<crate::models::DartPackageDependency>>>,
    #[serde(rename = "environment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub environment: Option<Option<Vec<crate::models::DartPackageDependency>>>,
}

impl DartPackageVersionDetails {
    pub fn new(repository: String, name: String, version: String, created: i64, downloads: i64, pinned: bool, disk_size: i64, description: String, home_page: String, repository_url: String, issue_tracker: String, documentation: String, license: String, readme: String, changelog: String) -> DartPackageVersionDetails {
        DartPackageVersionDetails {
            repository,
            name,
            version,
            tags: None,
            created,
            accessed: None,
            downloads,
            pinned,
            comment: None,
            disk_size,
            author: None,
            authors: None,
            origin: None,
            metadata: None,
            description,
            home_page,
            repository_url,
            issue_tracker,
            documentation,
            license,
            readme,
            changelog,
            dependencies: None,
            dev_dependencies: None,
            dependency_overrides: None,
            environment: None,
        }
    }
}


