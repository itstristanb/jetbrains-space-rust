/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PythonPackageVersionDetails {
    #[serde(rename = "repository")]
    pub repository: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "version")]
    pub version: String,
    #[serde(rename = "tags", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Option<Vec<String>>>,
    #[serde(rename = "created")]
    pub created: i64,
    #[serde(rename = "accessed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub accessed: Option<Option<i64>>,
    #[serde(rename = "downloads")]
    pub downloads: i64,
    #[serde(rename = "pinned")]
    pub pinned: bool,
    #[serde(rename = "comment", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comment: Option<Option<String>>,
    #[serde(rename = "diskSize")]
    pub disk_size: i64,
    #[serde(rename = "author", skip_serializing_if = "Option::is_none")]
    pub author: Option<Box<crate::models::CPrincipal>>,
    #[serde(rename = "authors", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub authors: Option<Option<Vec<crate::models::CPrincipal>>>,
    #[serde(rename = "origin", skip_serializing_if = "Option::is_none")]
    pub origin: Option<Box<crate::models::PackageOrigin>>,
    #[serde(rename = "metadata", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Option<::std::collections::HashMap<String, String>>>,
    #[serde(rename = "notNormalizedName")]
    pub not_normalized_name: String,
    #[serde(rename = "platform", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Option<String>>,
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "descriptionContentType", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description_content_type: Option<Option<String>>,
    #[serde(rename = "keywords")]
    pub keywords: Vec<String>,
    #[serde(rename = "homePage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub home_page: Option<Option<String>>,
    #[serde(rename = "authorFromPackageDetails", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_from_package_details: Option<Option<String>>,
    #[serde(rename = "authorEmail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub author_email: Option<Option<String>>,
    #[serde(rename = "maintainer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maintainer: Option<Option<String>>,
    #[serde(rename = "maintainerEmail", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub maintainer_email: Option<Option<String>>,
    #[serde(rename = "license", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub license: Option<Option<String>>,
    #[serde(rename = "classifiers")]
    pub classifiers: Vec<String>,
    #[serde(rename = "projectUrls")]
    pub project_urls: Vec<crate::models::PythonPackageUrl>,
    #[serde(rename = "requiresDist")]
    pub requires_dist: Vec<String>,
    #[serde(rename = "requiresPython", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub requires_python: Option<Option<String>>,
    #[serde(rename = "files")]
    pub files: Vec<crate::models::PythonPackageFile>,
}

impl PythonPackageVersionDetails {
    pub fn new(repository: String, name: String, version: String, created: i64, downloads: i64, pinned: bool, disk_size: i64, not_normalized_name: String, keywords: Vec<String>, classifiers: Vec<String>, project_urls: Vec<crate::models::PythonPackageUrl>, requires_dist: Vec<String>, files: Vec<crate::models::PythonPackageFile>) -> PythonPackageVersionDetails {
        PythonPackageVersionDetails {
            repository,
            name,
            version,
            tags: None,
            created,
            accessed: None,
            downloads,
            pinned,
            comment: None,
            disk_size,
            author: None,
            authors: None,
            origin: None,
            metadata: None,
            not_normalized_name,
            platform: None,
            summary: None,
            description: None,
            description_content_type: None,
            keywords,
            home_page: None,
            author_from_package_details: None,
            author_email: None,
            maintainer: None,
            maintainer_email: None,
            license: None,
            classifiers,
            project_urls,
            requires_dist,
            requires_python: None,
            files,
        }
    }
}


