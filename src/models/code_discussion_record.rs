/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeDiscussionRecord {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "projectId")]
    pub project_id: String,
    #[serde(rename = "project", skip_serializing_if = "Option::is_none")]
    pub project: Option<Box<crate::models::PrProject>>,
    #[serde(rename = "anchor")]
    pub anchor: Box<crate::models::CodeDiscussionAnchor>,
    #[serde(rename = "endAnchor", skip_serializing_if = "Option::is_none")]
    pub end_anchor: Option<Box<crate::models::CodeDiscussionAnchor>>,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "channel")]
    pub channel: Box<crate::models::M2ChannelRecord>,
    #[serde(rename = "resolvable", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub resolvable: Option<Option<bool>>,
    #[serde(rename = "resolved")]
    pub resolved: bool,
    #[serde(rename = "snippet", skip_serializing_if = "Option::is_none")]
    pub snippet: Option<Box<crate::models::CodeDiscussionSnippet>>,
    #[serde(rename = "suggestedEdit", skip_serializing_if = "Option::is_none")]
    pub suggested_edit: Option<Box<crate::models::CodeDiscussionSuggestedEdit>>,
    #[serde(rename = "resolvedBy", skip_serializing_if = "Option::is_none")]
    pub resolved_by: Option<Box<crate::models::CPrincipal>>,
    #[serde(rename = "pending", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub pending: Option<Option<bool>>,
    #[serde(rename = "review", skip_serializing_if = "Option::is_none")]
    pub review: Option<Box<crate::models::CodeReviewRecord>>,
    #[serde(rename = "feedItemId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub feed_item_id: Option<Option<String>>,
    #[serde(rename = "reviews", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub reviews: Option<Option<Vec<crate::models::CodeReviewRecord>>>,
    #[serde(rename = "archived")]
    pub archived: bool,
}

impl CodeDiscussionRecord {
    pub fn new(id: String, project_id: String, anchor: crate::models::CodeDiscussionAnchor, created: String, channel: crate::models::M2ChannelRecord, resolved: bool, archived: bool) -> CodeDiscussionRecord {
        CodeDiscussionRecord {
            id,
            project_id,
            project: None,
            anchor: Box::new(anchor),
            end_anchor: None,
            created,
            channel: Box::new(channel),
            resolvable: None,
            resolved,
            snippet: None,
            suggested_edit: None,
            resolved_by: None,
            pending: None,
            review: None,
            feed_item_id: None,
            reviews: None,
            archived,
        }
    }
}


