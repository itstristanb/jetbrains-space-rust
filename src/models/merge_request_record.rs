/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MergeRequestRecord {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "project")]
    pub project: Box<crate::models::ProjectKey>,
    #[serde(rename = "projectId")]
    pub project_id: String,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "state")]
    pub state: crate::models::CodeReviewState,
    #[serde(rename = "canBeReopened", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub can_be_reopened: Option<Option<bool>>,
    #[serde(rename = "createdAt")]
    pub created_at: i64,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::TdMemberProfile>>,
    #[serde(rename = "timestamp", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub timestamp: Option<Option<i64>>,
    #[serde(rename = "turnBased", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub turn_based: Option<Option<bool>>,
    #[serde(rename = "feedChannel", skip_serializing_if = "Option::is_none")]
    pub feed_channel: Option<Box<crate::models::M2ChannelRecord>>,
    #[serde(rename = "feedChannelId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub feed_channel_id: Option<Option<String>>,
    #[serde(rename = "branchPairs")]
    pub branch_pairs: Vec<crate::models::MergeRequestBranchPair>,
    #[serde(rename = "readOnly", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub read_only: Option<Option<bool>>,
    #[serde(rename = "externalLink", skip_serializing_if = "Option::is_none")]
    pub external_link: Option<Box<crate::models::ExternalCodeReviewLink>>,
    #[serde(rename = "participants", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub participants: Option<Option<Vec<crate::models::CodeReviewParticipant>>>,
    #[serde(rename = "reviewers")]
    pub reviewers: Vec<crate::models::CodeReviewParticipantRecord>,
    #[serde(rename = "authors")]
    pub authors: Vec<crate::models::CodeReviewParticipantRecord>,
    #[serde(rename = "watchers")]
    pub watchers: Vec<crate::models::CodeReviewParticipantRecord>,
    #[serde(rename = "discussionCounter")]
    pub discussion_counter: Box<crate::models::DiscussionCounter>,
    #[serde(rename = "commits")]
    pub commits: Vec<crate::models::ReviewCommit>,
    #[serde(rename = "issueIds")]
    pub issue_ids: Vec<String>,
    #[serde(rename = "externalIssues", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub external_issues: Option<Option<Vec<crate::models::ExternalIssueIdOut>>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "unfurls")]
    pub unfurls: Vec<crate::models::Attachment>,
}

impl MergeRequestRecord {
    pub fn new(id: String, project: crate::models::ProjectKey, project_id: String, number: i32, title: String, state: crate::models::CodeReviewState, created_at: i64, branch_pairs: Vec<crate::models::MergeRequestBranchPair>, reviewers: Vec<crate::models::CodeReviewParticipantRecord>, authors: Vec<crate::models::CodeReviewParticipantRecord>, watchers: Vec<crate::models::CodeReviewParticipantRecord>, discussion_counter: crate::models::DiscussionCounter, commits: Vec<crate::models::ReviewCommit>, issue_ids: Vec<String>, unfurls: Vec<crate::models::Attachment>) -> MergeRequestRecord {
        MergeRequestRecord {
            id,
            project: Box::new(project),
            project_id,
            number,
            title,
            state,
            can_be_reopened: None,
            created_at,
            created_by: None,
            timestamp: None,
            turn_based: None,
            feed_channel: None,
            feed_channel_id: None,
            branch_pairs,
            read_only: None,
            external_link: None,
            participants: None,
            reviewers,
            authors,
            watchers,
            discussion_counter: Box::new(discussion_counter),
            commits,
            issue_ids,
            external_issues: None,
            description: None,
            unfurls,
        }
    }
}


