/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CodeReviewSubscriptionFilterIn {
    #[serde(rename = "project", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project: Option<Option<String>>,
    #[serde(rename = "repository", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub repository: Option<Option<String>>,
    #[serde(rename = "authors")]
    pub authors: Vec<String>,
    #[serde(rename = "participants")]
    pub participants: Vec<String>,
    #[serde(rename = "branchSpec")]
    pub branch_spec: Vec<String>,
    #[serde(rename = "pathSpec")]
    pub path_spec: Vec<String>,
    #[serde(rename = "titleRegex")]
    pub title_regex: String,
}

impl CodeReviewSubscriptionFilterIn {
    pub fn new(authors: Vec<String>, participants: Vec<String>, branch_spec: Vec<String>, path_spec: Vec<String>, title_regex: String) -> CodeReviewSubscriptionFilterIn {
        CodeReviewSubscriptionFilterIn {
            project: None,
            repository: None,
            authors,
            participants,
            branch_spec,
            path_spec,
            title_regex,
        }
    }
}


