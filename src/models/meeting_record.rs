/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MeetingRecord {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "starts")]
    pub starts: String,
    #[serde(rename = "finishes")]
    pub finishes: String,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<Box<crate::models::ATimeZone>>,
    #[serde(rename = "allDay")]
    pub all_day: bool,
    #[serde(rename = "rooms")]
    pub rooms: Vec<crate::models::TdLocation>,
    #[serde(rename = "participants")]
    pub participants: Vec<crate::models::Participant>,
    #[serde(rename = "article", skip_serializing_if = "Option::is_none")]
    pub article: Option<Box<crate::models::ArticleRecord>>,
}

impl MeetingRecord {
    pub fn new(id: String, archived: bool, starts: String, finishes: String, all_day: bool, rooms: Vec<crate::models::TdLocation>, participants: Vec<crate::models::Participant>) -> MeetingRecord {
        MeetingRecord {
            id,
            archived,
            starts,
            finishes,
            timezone: None,
            all_day,
            rooms,
            participants,
            article: None,
        }
    }
}


