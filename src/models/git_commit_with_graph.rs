/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct GitCommitWithGraph {
    #[serde(rename = "repositoryName")]
    pub repository_name: String,
    #[serde(rename = "commit")]
    pub commit: Box<crate::models::GitCommitInfo>,
    #[serde(rename = "commitMessageUnfurls")]
    pub commit_message_unfurls: Vec<crate::models::Unfurl>,
    #[serde(rename = "reviews")]
    pub reviews: Vec<crate::models::CodeReviewRecord>,
    #[serde(rename = "issueIds")]
    pub issue_ids: Vec<String>,
    #[serde(rename = "linkedIssues", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub linked_issues: Option<Option<Vec<crate::models::GenericIssueId>>>,
    #[serde(rename = "deployments")]
    pub deployments: Vec<crate::models::GitCommitWithGraphDeploymentsInner>,
    #[serde(rename = "layout", skip_serializing_if = "Option::is_none")]
    pub layout: Option<Box<crate::models::GitGraphLayoutLine>>,
    #[serde(rename = "unreachable")]
    pub unreachable: bool,
}

impl GitCommitWithGraph {
    pub fn new(repository_name: String, commit: crate::models::GitCommitInfo, commit_message_unfurls: Vec<crate::models::Unfurl>, reviews: Vec<crate::models::CodeReviewRecord>, issue_ids: Vec<String>, deployments: Vec<crate::models::GitCommitWithGraphDeploymentsInner>, unreachable: bool) -> GitCommitWithGraph {
        GitCommitWithGraph {
            repository_name,
            commit: Box::new(commit),
            commit_message_unfurls,
            reviews,
            issue_ids,
            linked_issues: None,
            deployments,
            layout: None,
            unreachable,
        }
    }
}


