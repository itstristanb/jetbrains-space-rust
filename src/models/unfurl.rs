/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Unfurl {
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "link")]
    pub link: String,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "details", skip_serializing_if = "Option::is_none")]
    pub details: Option<Box<crate::models::UnfurlDetails>>,
    #[serde(rename = "sitename", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sitename: Option<Option<String>>,
    #[serde(rename = "image", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image: Option<Option<String>>,
    #[serde(rename = "imageMime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_mime: Option<Option<String>>,
    #[serde(rename = "imageWidth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_width: Option<Option<i32>>,
    #[serde(rename = "imageHeight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image_height: Option<Option<i32>>,
    #[serde(rename = "video", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video: Option<Option<String>>,
    #[serde(rename = "videoIFrame", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_i_frame: Option<Option<String>>,
    #[serde(rename = "videoMime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_mime: Option<Option<String>>,
    #[serde(rename = "videoHeight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_height: Option<Option<i32>>,
    #[serde(rename = "videoWidth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub video_width: Option<Option<i32>>,
    #[serde(rename = "favicon", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub favicon: Option<Option<String>>,
    #[serde(rename = "alwaysInline", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub always_inline: Option<Option<bool>>,
    #[serde(rename = "onlyForCustomLinks", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub only_for_custom_links: Option<Option<bool>>,
    #[serde(rename = "viewTypes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub view_types: Option<Option<Vec<crate::models::UnfurlViewType>>>,
}

impl Unfurl {
    pub fn new(title: String, link: String, text: String) -> Unfurl {
        Unfurl {
            title,
            link,
            text,
            details: None,
            sitename: None,
            image: None,
            image_mime: None,
            image_width: None,
            image_height: None,
            video: None,
            video_i_frame: None,
            video_mime: None,
            video_height: None,
            video_width: None,
            favicon: None,
            always_inline: None,
            only_for_custom_links: None,
            view_types: None,
        }
    }
}


