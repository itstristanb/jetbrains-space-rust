/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CalendarsMeetingsIdPatchRequest {
    #[serde(rename = "summary", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub summary: Option<Option<String>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "occurrenceRule", skip_serializing_if = "Option::is_none")]
    pub occurrence_rule: Option<Box<crate::models::CalendarEventSpec>>,
    #[serde(rename = "locationsDiff", skip_serializing_if = "Option::is_none")]
    pub locations_diff: Option<Box<crate::models::Diff>>,
    #[serde(rename = "profilesDiff", skip_serializing_if = "Option::is_none")]
    pub profiles_diff: Option<Box<crate::models::Diff>>,
    #[serde(rename = "externalParticipantsDiff", skip_serializing_if = "Option::is_none")]
    pub external_participants_diff: Option<Box<crate::models::Diff>>,
    #[serde(rename = "teamsDiff", skip_serializing_if = "Option::is_none")]
    pub teams_diff: Option<Box<crate::models::Diff>>,
    #[serde(rename = "visibility", skip_serializing_if = "Option::is_none")]
    pub visibility: Option<crate::models::MeetingVisibility>,
    #[serde(rename = "modificationPreference", skip_serializing_if = "Option::is_none")]
    pub modification_preference: Option<crate::models::MeetingModificationPreference>,
    #[serde(rename = "joiningPreference", skip_serializing_if = "Option::is_none")]
    pub joining_preference: Option<crate::models::MeetingJoiningPreference>,
    #[serde(rename = "notifyOnExport", skip_serializing_if = "Option::is_none")]
    pub notify_on_export: Option<bool>,
    #[serde(rename = "organizer", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub organizer: Option<Option<String>>,
    #[serde(rename = "targetDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub target_date: Option<Option<String>>,
    #[serde(rename = "modificationKind", skip_serializing_if = "Option::is_none")]
    pub modification_kind: Option<crate::models::RecurrentModification>,
    #[serde(rename = "conferenceData", skip_serializing_if = "Option::is_none")]
    pub conference_data: Option<Box<crate::models::EventConferenceData>>,
    #[serde(rename = "attachments", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachments: Option<Option<Vec<crate::models::MeetingAttachment>>>,
    #[serde(rename = "calendarId", skip_serializing_if = "Option::is_none")]
    pub calendar_id: Option<Box<crate::models::CalendarIdentifier>>,
}

impl CalendarsMeetingsIdPatchRequest {
    pub fn new() -> CalendarsMeetingsIdPatchRequest {
        CalendarsMeetingsIdPatchRequest {
            summary: None,
            description: None,
            occurrence_rule: None,
            locations_diff: None,
            profiles_diff: None,
            external_participants_diff: None,
            teams_diff: None,
            visibility: None,
            modification_preference: None,
            joining_preference: None,
            notify_on_export: None,
            organizer: None,
            target_date: None,
            modification_kind: None,
            conference_data: None,
            attachments: None,
            calendar_id: None,
        }
    }
}


