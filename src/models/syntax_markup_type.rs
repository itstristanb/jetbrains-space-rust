/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */


/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SyntaxMarkupType {
    #[serde(rename = "KEYWORD")]
    Keyword,
    #[serde(rename = "COMMENT")]
    Comment,
    #[serde(rename = "NUM_LITERAL")]
    NumLiteral,
    #[serde(rename = "STRING_LITERAL")]
    StringLiteral,
    #[serde(rename = "DECLARATION")]
    Declaration,
    #[serde(rename = "PARAMETER_ASSIGNMENT")]
    ParameterAssignment,
    #[serde(rename = "IDENTIFIER_TYPE")]
    IdentifierType,
    #[serde(rename = "IDENTIFIER_DECLARATION")]
    IdentifierDeclaration,
    #[serde(rename = "IDENTIFIER")]
    Identifier,
    #[serde(rename = "INVOCATION")]
    Invocation,
    #[serde(rename = "DSL")]
    Dsl,
    #[serde(rename = "KEY")]
    Key,
    #[serde(rename = "TAG")]
    Tag,
    #[serde(rename = "ANNOTATION")]
    Annotation,
    #[serde(rename = "PREPROCESSOR_ANNOTATION")]
    PreprocessorAnnotation,
    #[serde(rename = "PREPROCESSOR_MESSAGE")]
    PreprocessorMessage,
    #[serde(rename = "HIGHLIGHT")]
    Highlight,
    #[serde(rename = "CODE_FOLD")]
    CodeFold,
    #[serde(rename = "SKIP")]
    Skip,

}

impl ToString for SyntaxMarkupType {
    fn to_string(&self) -> String {
        match self {
            Self::Keyword => String::from("KEYWORD"),
            Self::Comment => String::from("COMMENT"),
            Self::NumLiteral => String::from("NUM_LITERAL"),
            Self::StringLiteral => String::from("STRING_LITERAL"),
            Self::Declaration => String::from("DECLARATION"),
            Self::ParameterAssignment => String::from("PARAMETER_ASSIGNMENT"),
            Self::IdentifierType => String::from("IDENTIFIER_TYPE"),
            Self::IdentifierDeclaration => String::from("IDENTIFIER_DECLARATION"),
            Self::Identifier => String::from("IDENTIFIER"),
            Self::Invocation => String::from("INVOCATION"),
            Self::Dsl => String::from("DSL"),
            Self::Key => String::from("KEY"),
            Self::Tag => String::from("TAG"),
            Self::Annotation => String::from("ANNOTATION"),
            Self::PreprocessorAnnotation => String::from("PREPROCESSOR_ANNOTATION"),
            Self::PreprocessorMessage => String::from("PREPROCESSOR_MESSAGE"),
            Self::Highlight => String::from("HIGHLIGHT"),
            Self::CodeFold => String::from("CODE_FOLD"),
            Self::Skip => String::from("SKIP"),
        }
    }
}

impl Default for SyntaxMarkupType {
    fn default() -> SyntaxMarkupType {
        Self::Keyword
    }
}




