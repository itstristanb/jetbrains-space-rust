/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Issue {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "projectId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub project_id: Option<Option<String>>,
    #[serde(rename = "projectRef")]
    pub project_ref: Box<crate::models::PrProject>,
    #[serde(rename = "trackerRef", skip_serializing_if = "Option::is_none")]
    pub tracker_ref: Option<Box<crate::models::IssueTracker>>,
    #[serde(rename = "number")]
    pub number: i32,
    #[serde(rename = "createdBy")]
    pub created_by: Box<crate::models::CPrincipal>,
    #[serde(rename = "creationTime")]
    pub creation_time: String,
    #[serde(rename = "assignee", skip_serializing_if = "Option::is_none")]
    pub assignee: Option<Box<crate::models::TdMemberProfile>>,
    #[serde(rename = "status")]
    pub status: Box<crate::models::IssueStatus>,
    #[serde(rename = "dueDate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<Option<String>>,
    #[serde(rename = "externalEntityInfo", skip_serializing_if = "Option::is_none")]
    pub external_entity_info: Option<Box<crate::models::ExternalEntityInfoRecord>>,
    #[serde(rename = "tags")]
    pub tags: Vec<crate::models::PlanningTag>,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "attachmentsCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub attachments_count: Option<Option<i32>>,
    #[serde(rename = "subItemsCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub sub_items_count: Option<Option<i32>>,
    #[serde(rename = "doneSubItemsCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub done_sub_items_count: Option<Option<i32>>,
    #[serde(rename = "commentsCount", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub comments_count: Option<Option<i32>>,
    #[serde(rename = "deletedBy", skip_serializing_if = "Option::is_none")]
    pub deleted_by: Option<Box<crate::models::CPrincipal>>,
    #[serde(rename = "deletedTime", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub deleted_time: Option<Option<String>>,
    #[serde(rename = "sprints")]
    pub sprints: Vec<crate::models::SprintRecord>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "channel")]
    pub channel: Box<crate::models::M2ChannelRecord>,
    #[serde(rename = "attachments")]
    pub attachments: Vec<crate::models::AttachmentInfo>,
    #[serde(rename = "unfurls", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub unfurls: Option<Option<Vec<crate::models::AttachmentInfo>>>,
    #[serde(rename = "rtDescription", skip_serializing_if = "Option::is_none")]
    pub rt_description: Option<Box<crate::models::RtContent>>,
    #[serde(rename = "parents")]
    pub parents: Vec<crate::models::Issue>,
    #[serde(rename = "backlogs")]
    pub backlogs: Vec<crate::models::BoardBacklog>,
    #[serde(rename = "checklists")]
    pub checklists: Vec<crate::models::Checklist>,
    #[serde(rename = "subItemsList")]
    pub sub_items_list: Box<crate::models::Checklist>,
    #[serde(rename = "messagePermalink", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub message_permalink: Option<Option<String>>,
    #[serde(rename = "customFields")]
    pub custom_fields: ::std::collections::HashMap<String, crate::models::CfValue>,
}

impl Issue {
    pub fn new(id: String, archived: bool, project_ref: crate::models::PrProject, number: i32, created_by: crate::models::CPrincipal, creation_time: String, status: crate::models::IssueStatus, tags: Vec<crate::models::PlanningTag>, title: String, sprints: Vec<crate::models::SprintRecord>, channel: crate::models::M2ChannelRecord, attachments: Vec<crate::models::AttachmentInfo>, parents: Vec<crate::models::Issue>, backlogs: Vec<crate::models::BoardBacklog>, checklists: Vec<crate::models::Checklist>, sub_items_list: crate::models::Checklist, custom_fields: ::std::collections::HashMap<String, crate::models::CfValue>) -> Issue {
        Issue {
            id,
            archived,
            project_id: None,
            project_ref: Box::new(project_ref),
            tracker_ref: None,
            number,
            created_by: Box::new(created_by),
            creation_time,
            assignee: None,
            status: Box::new(status),
            due_date: None,
            external_entity_info: None,
            tags,
            title,
            attachments_count: None,
            sub_items_count: None,
            done_sub_items_count: None,
            comments_count: None,
            deleted_by: None,
            deleted_time: None,
            sprints,
            description: None,
            channel: Box::new(channel),
            attachments,
            unfurls: None,
            rt_description: None,
            parents,
            backlogs,
            checklists,
            sub_items_list: Box::new(sub_items_list),
            message_permalink: None,
            custom_fields,
        }
    }
}


