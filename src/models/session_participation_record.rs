/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionParticipationRecord {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "connectionId")]
    pub connection_id: i64,
    #[serde(rename = "sessionId")]
    pub session_id: String,
    #[serde(rename = "member", skip_serializing_if = "Option::is_none")]
    pub member: Option<Box<crate::models::TdMemberProfile>>,
    #[serde(rename = "state")]
    pub state: crate::models::ParticipationState,
    #[serde(rename = "participant", skip_serializing_if = "Option::is_none")]
    pub participant: Option<Box<crate::models::TdCallParticipant>>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "producers")]
    pub producers: Vec<crate::models::ProducerOptions>,
    #[serde(rename = "dataProducers")]
    pub data_producers: Vec<crate::models::DataProducerOptions>,
    #[serde(rename = "version")]
    pub version: i64,
    #[serde(rename = "data")]
    pub data: Box<crate::models::ParticipantStateData>,
}

impl SessionParticipationRecord {
    pub fn new(id: String, connection_id: i64, session_id: String, state: crate::models::ParticipationState, producers: Vec<crate::models::ProducerOptions>, data_producers: Vec<crate::models::DataProducerOptions>, version: i64, data: crate::models::ParticipantStateData) -> SessionParticipationRecord {
        SessionParticipationRecord {
            id,
            connection_id,
            session_id,
            member: None,
            state,
            participant: None,
            description: None,
            producers,
            data_producers,
            version,
            data: Box::new(data),
        }
    }
}


