/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct KbFolder {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "archived")]
    pub archived: bool,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "parent", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Box<crate::models::KbFolder>>,
    #[serde(rename = "subfolders")]
    pub subfolders: Vec<crate::models::KbFolder>,
    #[serde(rename = "articles")]
    pub articles: Vec<crate::models::KbArticle>,
    #[serde(rename = "book")]
    pub book: Box<crate::models::KbBook>,
    #[serde(rename = "cover", skip_serializing_if = "Option::is_none")]
    pub cover: Option<Box<crate::models::KbArticle>>,
    #[serde(rename = "alias")]
    pub alias: String,
    #[serde(rename = "created")]
    pub created: String,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<crate::models::CPrincipal>>,
    #[serde(rename = "updated")]
    pub updated: String,
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<Box<crate::models::CPrincipal>>,
}

impl KbFolder {
    pub fn new(id: String, archived: bool, name: String, subfolders: Vec<crate::models::KbFolder>, articles: Vec<crate::models::KbArticle>, book: crate::models::KbBook, alias: String, created: String, updated: String) -> KbFolder {
        KbFolder {
            id,
            archived,
            name,
            parent: None,
            subfolders,
            articles,
            book: Box::new(book),
            cover: None,
            alias,
            created,
            created_by: None,
            updated,
            updated_by: None,
        }
    }
}


