/*
 * Space
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2023.3.0-DEV.171131
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CalendarEventSpec {
    #[serde(rename = "start")]
    pub start: String,
    #[serde(rename = "end")]
    pub end: String,
    #[serde(rename = "recurrenceRule", skip_serializing_if = "Option::is_none")]
    pub recurrence_rule: Option<Box<crate::models::RecurrenceRule>>,
    #[serde(rename = "allDay")]
    pub all_day: bool,
    #[serde(rename = "timezone")]
    pub timezone: Box<crate::models::ATimeZone>,
    #[serde(rename = "parentId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent_id: Option<Option<String>>,
    #[serde(rename = "initialMeetingStart", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub initial_meeting_start: Option<Option<String>>,
    #[serde(rename = "busyStatus", skip_serializing_if = "Option::is_none")]
    pub busy_status: Option<crate::models::BusyStatus>,
    #[serde(rename = "nextChainId", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub next_chain_id: Option<Option<String>>,
}

impl CalendarEventSpec {
    pub fn new(start: String, end: String, all_day: bool, timezone: crate::models::ATimeZone) -> CalendarEventSpec {
        CalendarEventSpec {
            start,
            end,
            recurrence_rule: None,
            all_day,
            timezone: Box::new(timezone),
            parent_id: None,
            initial_meeting_start: None,
            busy_status: None,
            next_chain_id: None,
        }
    }
}


